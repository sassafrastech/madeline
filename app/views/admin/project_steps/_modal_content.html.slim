/ This section tag is out here so that show-view/edit-view classes affect the modal header, body, and footer
/ mode == :show_and_form means we are starting out in show mode and allowing the user to switch to edit
section.step-fields class=(@mode == :show_and_form ? 'show-view' : 'edit-view') data-id=@step.id
  div.modal-header
    button type="button" class="close cancel" aria-label== t(:cancel)
      span aria-hidden="true" &times;
    h4.modal-title
      .view-element
        = @step.summary_or_none
      .form-element
        = t("project_step.#{@step.new_record? ? 'add' : 'edit'}")

  div.modal-body
    - if @mode == :show_and_form
      .show-actions
        // Edit step functionality is disabled in the calendar.
        // There are bugs in the edit step modal inside a calendar context that need to be resolved
        // before enabling this functionality.
        - unless @context == "calendar"
          a.edit-action.view-element
            i.fa.fa-pencil.fa-large>
            = t("project_step.edit")
          a.show-action.form-element
            i.fa.fa-close.fa-large>
            = t("cancel_edit")
          - if @step.persisted?
            a.delete-action [
                data-confirm=t("project_step.confirm_deletion")
                data-confirm-title=t("project_step.delete", count: 1)
                data-confirm-cancel=t(:cancel)
                data-confirm-proceed=t(:confirm)
              ]
              i.fa.fa-trash.fa-large>
              = t("project_step.delete", count: 1)
      javascript:
        $(function() { new MS.Views.ShowEditView({ el: '.step-fields' }) });

    = simple_form_for([:admin, @step],
      wrapper: :horizontal_form,
      remote: true,
      html: {class: "form-horizontal project-step-form"},
      defaults: {input_html: {class: "form-element form-control"}},
      ) do |f|

      = hidden_field_tag(:context, context)

      = error_notification(f)

      / Project
      - if @step.new_record?
        / Need to pass this through to create but not update.
        = f.hidden_field(:project_id)
      - else
        .view-element
          = f.input :project_id
            = link_to @project.display_name,
              send("admin_#{@project.model_name.singular}_tab_path", @project, tab: "details")

      / Summary & details
      .view-element
        = f.input :summary, wrapper_html: {class: 'hidden-print'}
          = @step.summary
        = f.input :details
          = @step.details
      .form-element
        = f.translatable_inputs do |l|
          = f.input "summary_#{l}".to_sym,
            input_html: {data: {translatable: 'summary'}},
            placeholder: I18n.t('common.summary', locale: l),
            label: I18n.t('common.summary', locale: l)
          = f.input "details_#{l}".to_sym, as: :text,
            input_html: {rows: 3, data: {translatable: 'details'}},
            placeholder: I18n.t('common.details', locale: l),
            label: I18n.t('common.details', locale: l)

      = f.input :step_type_value
        .view-element = @step.step_type_label
        = f.input_field :step_type_value,
          collection: ProjectStep.step_type_option_set.translated_list,
          include_blank: false

      = f.input :parent_id
        .view-element = @step.parent.summary_or_none if @step.parent.present?
        = f.input_field :parent_id, collection: @parents.map { |i| [indented_option_label(i, :summary_or_none), i.id] }, 
            include_blank: false

      = f.input :schedule_parent_id
        .view-element = @step.schedule_parent.summary_or_none if @step.schedule_parent.present?
        = f.input_field :schedule_parent_id, collection: @precedents, label_method: :summary_or_none, include_blank: true

      - if @step.old_start_date && @step.is_finalized?
        = f.input :old_start_date
          - if policy(@step).edit_finalized_dates?
            = f.input_field :old_start_date, as: :date_picker
          - else
            .static-text-as-field = ldate(@step.old_start_date)

      = f.input :scheduled_start_date
        - if @step.schedule_parent.present?
          .static-text-as-field = ldate(@step.scheduled_start_date)
        - else
          .view-element = ldate(@step.scheduled_start_date)
        = f.input_field :scheduled_start_date, as: :date_picker

      - if @step.old_duration_days && @step.old_duration_days > 0 && @step.is_finalized?
        = f.input :old_duration_days
          - if policy(@step).edit_finalized_dates?
            = f.input_field :old_duration_days
            = t("project_step.days")
          - else
            .static-text-as-field 
              = @step.old_duration_days
              = t("project_step.days")

      = f.input "duration"
        .view-element = @step.scheduled_duration_days
        .form-element
          = f.input_field :scheduled_duration_days
          = t("project_step.days")

      = f.input :scheduled_end_date
        .static-text-as-field = ldate(@step.scheduled_end_date)

      = f.input :actual_end_date
        .view-element = ldate(@step.actual_end_date)
        = f.input_field :actual_end_date, as: :date_picker

      // is_finalized? is not used because this input is used as a CSS selector
      = f.input :is_finalized
        - if @step.is_finalized_locked?
          .static-text-as-field
            = @step.is_finalized? ? t("reply_yes") : t("reply_no")
            =< "(#{t('locked')})"
        - else
          .view-element = @step.is_finalized? ? t("reply_yes") : t("reply_no")
          = f.input_field :is_finalized, as: :boolean, boolean_style: :inline

    = render "admin/project_logs/log_list", context: context if @step.logs_count > 0

  div.modal-footer
    .view-element
      button.btn.btn-primary.cancel type="button" = t(:close)
    .form-element
      button.btn.btn-default.cancel type="button" = t(:cancel)
      button.btn.btn-primary.submit = t(:submit)
