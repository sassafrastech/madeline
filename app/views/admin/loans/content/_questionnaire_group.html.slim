ol
  - optional_encountered = false
  - group.children.sort_by_required(@loan).each do |field|
    - css_class = field.required_for?(@loan) ? 'required' : 'optional'
    - if !optional_encountered && !field.required_for?(@loan)
      - optional_encountered = true
      <fieldset class="optional_questions"><legend>#{t 'questionnaires.optional_questions'}</legend>

    li.question data-level=field.level data-type=field.data_type data-id=field.id class=css_class
      - value = value_set.custom_value(field.id)

      div.question-label 
        - if !field.required_for?(@loan)
          span.optional-marker<> = "(#{t :optional})"
        = field.label

      - if !@print_view && field.explanation.present?
        p.help-block = field.explanation

      / Recurse if group, else render
      - if field.data_type == 'group'

        = render("admin/loans/content/questionnaire_group", f: f, value_set: value_set, group: field)

      - else
      
        .answer-wrapper

          - if value.has_rating?
            - if value.rating.present?
              .view-element.answer = "#{I18n.t('loan.rating')}: #{value.rating}"
            = f.input_field "#{field.attribute_sym}__rating".to_sym,
              collection: Array(1..5), prompt: I18n.t("select_prompt"), data: {rating: true}

          - if value.has_number?
            - if value.number.present?
              .view-element.answer = value.number
            = f.input_field "#{field.attribute_sym}__number".to_sym, as: :decimal

          - if value.has_text?
            - if value.text.present?
              .view-element.answer = simple_format(value.text)
            = f.input_field "#{field.attribute_sym}__text".to_sym, as: value.text_form_field_type

          - if value.has_boolean?
            - if value.boolean.present?
              .view-element.answer = t(value.boolean ? "reply_yes" : "reply_no")
            = f.input_field "#{field.attribute_sym}__boolean".to_sym,
              collection: %i(yes no), label_method: ->(i) { t("reply_#{i}") },
              prompt: I18n.t("select_prompt"), data: {boolean: true}

          - if value.has_sheet?
            - sheet = value.embeddable_media || EmbeddableMedia.new
            .view-element
              - if sheet.url
                p.spreadsheet-links
                  a[href="#" data-expands="iframe-#{field.attribute_sym}"
                    data-content="<iframe src='#{sheet.url}'>"]
                    = t("loan.spreadsheet_inline")
                  a href="#" data-hides="iframe-#{field.attribute_sym}"
                    = t("loan.spreadsheet_hide")
                  = ' - '
                  = link_to t("loan.spreadsheet_new_tab"), sheet.url, {target: '_blank'}

                div.spreadsheet data-expandable="iframe-#{field.attribute_sym}"

  - if optional_encountered
    </fieldset>
