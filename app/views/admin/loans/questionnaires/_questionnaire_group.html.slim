  / Note: the grouping of optional questions that happens here and in LoanQuestionnairesView
  / should probably be refactored someday to happen in the model
  div
    - optional_encountered = false
    - optionals_exist = roots.any? { |i| !i.required_for?(@loan) }
    - requireds_exist = roots.any? { |i| i.required_for?(@loan) }

    - roots.each_with_index do |question, idx|
      / Add page break for top-level groups with answered questions
      / Also add page break for top-level business model canvas answered question
      - if question.parent.root? && !response_set.tree_unanswered?(question)
        - if question.data_type == 'group' || question.data_type == "business_canvas"
          / Close and reopen fieldset with new group/page
          - if optional_encountered && @print_view
            </fieldset>
            - reopen_fieldset = true

          / Page header for print view
          = render "admin/loans/questionnaires/page_header"

      - optional = !question.required_for?(@loan)
      - start_of_optional_group = !optional_encountered && optionals_exist && requireds_exist && optional
      - if @print_view && (reopen_fieldset || (start_of_optional_group && !response_set.tree_unanswered?(question)))
        - optional_encountered = true; reopen_fieldset = false
        <fieldset class="optional_questions"><legend>#{t 'questionnaires.optional_questions'}</legend>

      - value = response_set.response(question)
      - css_class = optional ? 'optional' : 'required'

      / Don't print unanswered questions or groups
      - css_class += ' hidden-print' if response_set.tree_unanswered?(question)
      - css_class += " #{question.status}"

      .question data-level=question.depth data-type=question.data_type data-id=question.id class=css_class
        - index_str = (indices + [idx + 1]).join(".")

        span.tree-view
          - if !question.leaf?
            = render "admin/loans/questionnaires/progress_bar", object: value

          - if question.data_type == 'group'
            - header_tag = {tag: %i(h3 h4 h5)[question.depth] || :h5}
            *header_tag
              / Group title
              => index_str
              - if question.first_child?
                = question.label
              - else
                = (parents.map(&:label) + [question.label]).join(": ")
          - elsif question.depth == 1
            h4 = "#{index_str} #{question.label}"
          - else
            .question-label = "#{index_str} #{question.label}"

        - if question.explanation.present?
          .help-block.hidden-print.tree-view = simple_format(question.explanation.to_s)

        / Recurse if group, else render
        - if question.data_type == 'group'
          - if (filtered_children = question.children_applicable_to(@loan)).present?
            = render("admin/loans/questionnaires/questionnaire_group",
              f: f, response_set: response_set, roots: filtered_children,
              parents: parents + [question], indices: indices + [idx + 1])

        - else
          .answer-wrapper.tree-view
            - if value.has_rating?
              - if value.rating.present?
                .view-element.answer = "#{I18n.t('loan.rating')}: #{value.rating}"
              = f.input_field :"#{question.attribute_sym}[rating]", as: :select, selected: value.rating,
                collection: Array(1..5), prompt: I18n.t("select_prompt"), data: {rating: true}

            - if value.has_number?
              - if value.number.present?
                .view-element.answer = value.number
              = f.input_field :"#{question.attribute_sym}[number]", as: :decimal, value: value.number

            - if value.has_text?
              - if value.text.present?
                .view-element.answer = simple_format(value.text)
              = f.input_field :"#{question.attribute_sym}[text]", as: value.text_form_field_type,
                value: value.text

            - if value.has_string?
              - if value.string.present?
                .view-element.answer = simple_format(value.string)
              = f.input_field :"#{question.attribute_sym}[string]", value: value.string

            - if value.has_boolean?
              - if value.boolean.present?
                .view-element.answer = t(value.boolean == "yes" ? "reply_yes" : "reply_no")
              = f.input_field :"#{question.attribute_sym}[boolean]", as: :select, selected: value.boolean,
                collection: %i(yes no), label_method: ->(i) { t("reply_#{i}") },
                prompt: I18n.t("select_prompt"), data: {boolean: true}

            - if value.has_breakeven_table?
              - if value.breakeven_report.present?
                .view-element
                  = render "admin/loans/questionnaires/breakeven_table_report", report: value.breakeven_report
                  = render "admin/loans/questionnaires/breakeven_charts", report: value.breakeven_report, id: value.loan_question.id
                  - if value.breakeven_report[:periods] > 1
                    = render "admin/loans/questionnaires/breakeven_rampup/main", report: value.breakeven_report
                .form-element
                  = render 'admin/loans/questionnaires/breakeven_table_question', f: f,
                    question: question, data: value.breakeven_hash, total_fixed_costs: value.breakeven_report[:total_fixed_costs]
              - else
                .form-element
                  = render 'admin/loans/questionnaires/breakeven_table_question', f: f,
                    question: question, data: value.breakeven_hash, total_fixed_costs: 0

            - if value.has_business_canvas?
              .answer class=('form-element' if value.business_canvas_blank?)
                = render 'admin/loans/questionnaires/business_model_canvas', f: f,
                  question: question, data: value.business_canvas

            - if value.has_linked_document?
              = render 'admin/loans/questionnaires/linked_document', f: f,
                question: question, document: value.linked_document

            - if value.blank?
              .view-element.answer.blank = t("loan.no_answer")


    - if optional_encountered && @print_view
      </fieldset>
