section.questionnaires
  .text-right = link_to t('questions.manage'), admin_questions_path

  / Switch at top allowing toggling between criteria and post analysis
  .filter-switch.centered-text
    .btn-group
      = link_to t('loan.criteria'),
        admin_loan_tab_path(@loan.id, filter: "criteria", tab: "questions"),
        class: "btn btn-default #{'active' if @attrib == 'criteria'}",
        data: {filter: "criteria"}
      = link_to t('loan.post_analysis'),
        admin_loan_tab_path(@loan.id, filter: "post_analysis", tab: "questions"),
        class: "btn btn-default #{'active' if @attrib == 'post_analysis'}",
        data: {filter: "post_analysis"}

  div.questionnaire data-attrib=@attrib class=@attrib
    section.block class=(@response_set.persisted? && @response_set.valid? && !@conflict ? 'show-view' : 'edit-view')
      .show-actions
        - if policy(@loan).update? && @response_set.persisted?
          a.edit-action.view-element href="javascript:void(0)"
            i.fa.fa-pencil.fa-large>
            = t(".edit")
          a.show-action.form-element href="javascript:void(0)"
            = t("cancel_edit")
          = link_to [:admin, @response_set], method: :delete,
            data: { confirm: t("loan.confirm_response_deletion") }
            i.fa.fa-trash.fa-large>
            = t(".delete")

      h2 = t("loan.#{@attrib}")
      div.container
        div.row
          div.col-sm.outline
            h4 = t("admin.loans.questions.outline.header")
            = render "admin/loans/questionnaires/questionnaire_outline", questions: @root.children, depth: 0, parent: @root
          div.col-lg
            = render partial: "admin/loans/questionnaires/questionnaire_form",
                     locals: {response_set: @response_set, attrib: @attrib}

= render partial: "admin/loans/questionnaires/rich_text_modal"

p.alert.alert-warning.hidden#rt-changes-warning
  button.close data-dismiss="alert" type="button"  &times;
  i.fa.fa-info-circle>
  = t("loan.pending_changes")

javascript:
  $(function() {
    new MS.Views.ShowEditView({el: ".questionnaire[data-attrib=#{@attrib}] .block"});
    new MS.Views.LoanQuestionnairesView({
      loanId: #{@loan.id},
      locale: "#{I18n.locale}"
    });
  });

  $(function() {
    var $sidebar   = $(".outline"),
        $outlineHeight = $(".outline ul").height()
        $window    = $(window),
        $containerHeight = $("#questions").height()
        offset     = $sidebar.offset(),
        topPadding = 15;
    $window.scroll(function() {
      if ($window.scrollTop() > (offset.top + $outlineHeight)) {
        percentage = $window.scrollTop()/$containerHeight
        $sidebar.css('margin-top', $window.scrollTop() - $outlineHeight * percentage)
      } else {
        $sidebar.css('margin-top',0)
      }
    });
  });

  $(function() {
    var $editBar = $("#editBar")
        $window    = $(window)
    resizeEditBar = function () {
      $editBar.css('width', $editBar.parent().width())
    }
    resizeEditBar()
    $window.resize(function() {
      console.log("resized! parent is this wide:")
      console.log($editBar.parent().width())
      $editBar.css('width', $editBar.parent().width())
    });
  });
